// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/cicd.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Template struct {
	Id             string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	Name           string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name,omitempty"`
	Description    string                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" bson:"description,omitempty"`
	Type           string                   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" bson:"type,omitempty"`
	Category       string                   `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty" bson:"category,omitempty"`
	ScriptTemplate *Template_ScriptTemplate `protobuf:"bytes,6,opt,name=scriptTemplate,proto3" json:"scriptTemplate,omitempty" bson:"scriptTemplate,omitempty"`
}

func (m *Template) Reset()         { *m = Template{} }
func (m *Template) String() string { return proto.CompactTextString(m) }
func (*Template) ProtoMessage()    {}
func (*Template) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{1}
}
func (m *Template) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Template) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Template.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Template) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Template.Merge(m, src)
}
func (m *Template) XXX_Size() int {
	return m.Size()
}
func (m *Template) XXX_DiscardUnknown() {
	xxx_messageInfo_Template.DiscardUnknown(m)
}

var xxx_messageInfo_Template proto.InternalMessageInfo

func (m *Template) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Template) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Template) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Template) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Template) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Template) GetScriptTemplate() *Template_ScriptTemplate {
	if m != nil {
		return m.ScriptTemplate
	}
	return nil
}

type Template_ScriptTemplate struct {
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Script   string `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
}

func (m *Template_ScriptTemplate) Reset()         { *m = Template_ScriptTemplate{} }
func (m *Template_ScriptTemplate) String() string { return proto.CompactTextString(m) }
func (*Template_ScriptTemplate) ProtoMessage()    {}
func (*Template_ScriptTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{1, 0}
}
func (m *Template_ScriptTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Template_ScriptTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Template_ScriptTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Template_ScriptTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Template_ScriptTemplate.Merge(m, src)
}
func (m *Template_ScriptTemplate) XXX_Size() int {
	return m.Size()
}
func (m *Template_ScriptTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_Template_ScriptTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_Template_ScriptTemplate proto.InternalMessageInfo

func (m *Template_ScriptTemplate) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Template_ScriptTemplate) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

type GetTemplateReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetTemplateReq) Reset()         { *m = GetTemplateReq{} }
func (m *GetTemplateReq) String() string { return proto.CompactTextString(m) }
func (*GetTemplateReq) ProtoMessage()    {}
func (*GetTemplateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{2}
}
func (m *GetTemplateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTemplateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTemplateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTemplateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTemplateReq.Merge(m, src)
}
func (m *GetTemplateReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTemplateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTemplateReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTemplateReq proto.InternalMessageInfo

func (m *GetTemplateReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DelTemplateReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DelTemplateReq) Reset()         { *m = DelTemplateReq{} }
func (m *DelTemplateReq) String() string { return proto.CompactTextString(m) }
func (*DelTemplateReq) ProtoMessage()    {}
func (*DelTemplateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{3}
}
func (m *DelTemplateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelTemplateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelTemplateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelTemplateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelTemplateReq.Merge(m, src)
}
func (m *DelTemplateReq) XXX_Size() int {
	return m.Size()
}
func (m *DelTemplateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelTemplateReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelTemplateReq proto.InternalMessageInfo

func (m *DelTemplateReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PutTemplateReq struct {
	Template *Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (m *PutTemplateReq) Reset()         { *m = PutTemplateReq{} }
func (m *PutTemplateReq) String() string { return proto.CompactTextString(m) }
func (*PutTemplateReq) ProtoMessage()    {}
func (*PutTemplateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{4}
}
func (m *PutTemplateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutTemplateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutTemplateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutTemplateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutTemplateReq.Merge(m, src)
}
func (m *PutTemplateReq) XXX_Size() int {
	return m.Size()
}
func (m *PutTemplateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutTemplateReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutTemplateReq proto.InternalMessageInfo

func (m *PutTemplateReq) GetTemplate() *Template {
	if m != nil {
		return m.Template
	}
	return nil
}

type UpdateTemplateReq struct {
	Template *Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (m *UpdateTemplateReq) Reset()         { *m = UpdateTemplateReq{} }
func (m *UpdateTemplateReq) String() string { return proto.CompactTextString(m) }
func (*UpdateTemplateReq) ProtoMessage()    {}
func (*UpdateTemplateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{5}
}
func (m *UpdateTemplateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTemplateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTemplateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTemplateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTemplateReq.Merge(m, src)
}
func (m *UpdateTemplateReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTemplateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTemplateReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTemplateReq proto.InternalMessageInfo

func (m *UpdateTemplateReq) GetTemplate() *Template {
	if m != nil {
		return m.Template
	}
	return nil
}

type ListTemplateReq struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Brief  bool  `protobuf:"varint,3,opt,name=brief,proto3" json:"brief,omitempty"`
}

func (m *ListTemplateReq) Reset()         { *m = ListTemplateReq{} }
func (m *ListTemplateReq) String() string { return proto.CompactTextString(m) }
func (*ListTemplateReq) ProtoMessage()    {}
func (*ListTemplateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{6}
}
func (m *ListTemplateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTemplateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTemplateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTemplateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTemplateReq.Merge(m, src)
}
func (m *ListTemplateReq) XXX_Size() int {
	return m.Size()
}
func (m *ListTemplateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTemplateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListTemplateReq proto.InternalMessageInfo

func (m *ListTemplateReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListTemplateReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTemplateReq) GetBrief() bool {
	if m != nil {
		return m.Brief
	}
	return false
}

type ListTemplateRes struct {
	Templates []*Template `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (m *ListTemplateRes) Reset()         { *m = ListTemplateRes{} }
func (m *ListTemplateRes) String() string { return proto.CompactTextString(m) }
func (*ListTemplateRes) ProtoMessage()    {}
func (*ListTemplateRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{7}
}
func (m *ListTemplateRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTemplateRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTemplateRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTemplateRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTemplateRes.Merge(m, src)
}
func (m *ListTemplateRes) XXX_Size() int {
	return m.Size()
}
func (m *ListTemplateRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTemplateRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListTemplateRes proto.InternalMessageInfo

func (m *ListTemplateRes) GetTemplates() []*Template {
	if m != nil {
		return m.Templates
	}
	return nil
}

type Variable struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" bson:"description,omitempty"`
	Kvs         string `protobuf:"bytes,4,opt,name=kvs,proto3" json:"kvs,omitempty" bson:"kvs,omitempty"`
}

func (m *Variable) Reset()         { *m = Variable{} }
func (m *Variable) String() string { return proto.CompactTextString(m) }
func (*Variable) ProtoMessage()    {}
func (*Variable) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{8}
}
func (m *Variable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Variable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Variable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Variable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Variable.Merge(m, src)
}
func (m *Variable) XXX_Size() int {
	return m.Size()
}
func (m *Variable) XXX_DiscardUnknown() {
	xxx_messageInfo_Variable.DiscardUnknown(m)
}

var xxx_messageInfo_Variable proto.InternalMessageInfo

func (m *Variable) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Variable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Variable) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Variable) GetKvs() string {
	if m != nil {
		return m.Kvs
	}
	return ""
}

type GetVariableReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetVariableReq) Reset()         { *m = GetVariableReq{} }
func (m *GetVariableReq) String() string { return proto.CompactTextString(m) }
func (*GetVariableReq) ProtoMessage()    {}
func (*GetVariableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{9}
}
func (m *GetVariableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVariableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVariableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVariableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVariableReq.Merge(m, src)
}
func (m *GetVariableReq) XXX_Size() int {
	return m.Size()
}
func (m *GetVariableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVariableReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVariableReq proto.InternalMessageInfo

func (m *GetVariableReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DelVariableReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DelVariableReq) Reset()         { *m = DelVariableReq{} }
func (m *DelVariableReq) String() string { return proto.CompactTextString(m) }
func (*DelVariableReq) ProtoMessage()    {}
func (*DelVariableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{10}
}
func (m *DelVariableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelVariableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelVariableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelVariableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelVariableReq.Merge(m, src)
}
func (m *DelVariableReq) XXX_Size() int {
	return m.Size()
}
func (m *DelVariableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelVariableReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelVariableReq proto.InternalMessageInfo

func (m *DelVariableReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PutVariableReq struct {
	Variable *Variable `protobuf:"bytes,1,opt,name=variable,proto3" json:"variable,omitempty"`
}

func (m *PutVariableReq) Reset()         { *m = PutVariableReq{} }
func (m *PutVariableReq) String() string { return proto.CompactTextString(m) }
func (*PutVariableReq) ProtoMessage()    {}
func (*PutVariableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{11}
}
func (m *PutVariableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutVariableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutVariableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutVariableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutVariableReq.Merge(m, src)
}
func (m *PutVariableReq) XXX_Size() int {
	return m.Size()
}
func (m *PutVariableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutVariableReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutVariableReq proto.InternalMessageInfo

func (m *PutVariableReq) GetVariable() *Variable {
	if m != nil {
		return m.Variable
	}
	return nil
}

type UpdateVariableReq struct {
	Variable *Variable `protobuf:"bytes,1,opt,name=variable,proto3" json:"variable,omitempty"`
}

func (m *UpdateVariableReq) Reset()         { *m = UpdateVariableReq{} }
func (m *UpdateVariableReq) String() string { return proto.CompactTextString(m) }
func (*UpdateVariableReq) ProtoMessage()    {}
func (*UpdateVariableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{12}
}
func (m *UpdateVariableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVariableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVariableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVariableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVariableReq.Merge(m, src)
}
func (m *UpdateVariableReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVariableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVariableReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVariableReq proto.InternalMessageInfo

func (m *UpdateVariableReq) GetVariable() *Variable {
	if m != nil {
		return m.Variable
	}
	return nil
}

type ListVariableReq struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Brief  bool  `protobuf:"varint,3,opt,name=brief,proto3" json:"brief,omitempty"`
}

func (m *ListVariableReq) Reset()         { *m = ListVariableReq{} }
func (m *ListVariableReq) String() string { return proto.CompactTextString(m) }
func (*ListVariableReq) ProtoMessage()    {}
func (*ListVariableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{13}
}
func (m *ListVariableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVariableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVariableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVariableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVariableReq.Merge(m, src)
}
func (m *ListVariableReq) XXX_Size() int {
	return m.Size()
}
func (m *ListVariableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVariableReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListVariableReq proto.InternalMessageInfo

func (m *ListVariableReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListVariableReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListVariableReq) GetBrief() bool {
	if m != nil {
		return m.Brief
	}
	return false
}

type ListVariableRes struct {
	Variables []*Variable `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (m *ListVariableRes) Reset()         { *m = ListVariableRes{} }
func (m *ListVariableRes) String() string { return proto.CompactTextString(m) }
func (*ListVariableRes) ProtoMessage()    {}
func (*ListVariableRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{14}
}
func (m *ListVariableRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVariableRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVariableRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVariableRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVariableRes.Merge(m, src)
}
func (m *ListVariableRes) XXX_Size() int {
	return m.Size()
}
func (m *ListVariableRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVariableRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListVariableRes proto.InternalMessageInfo

func (m *ListVariableRes) GetVariables() []*Variable {
	if m != nil {
		return m.Variables
	}
	return nil
}

type Task struct {
	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" bson:"description,omitempty"`
	TemplateIDs []string `protobuf:"bytes,4,rep,name=templateIDs,proto3" json:"templateIDs,omitempty" bson:"templateIDs,omitempty"`
	VariableIDs []string `protobuf:"bytes,5,rep,name=variableIDs,proto3" json:"variableIDs,omitempty" bson:"variableIDs,omitempty"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{15}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetTemplateIDs() []string {
	if m != nil {
		return m.TemplateIDs
	}
	return nil
}

func (m *Task) GetVariableIDs() []string {
	if m != nil {
		return m.VariableIDs
	}
	return nil
}

type GetTaskReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetTaskReq) Reset()         { *m = GetTaskReq{} }
func (m *GetTaskReq) String() string { return proto.CompactTextString(m) }
func (*GetTaskReq) ProtoMessage()    {}
func (*GetTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{16}
}
func (m *GetTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskReq.Merge(m, src)
}
func (m *GetTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskReq proto.InternalMessageInfo

func (m *GetTaskReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DelTaskReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DelTaskReq) Reset()         { *m = DelTaskReq{} }
func (m *DelTaskReq) String() string { return proto.CompactTextString(m) }
func (*DelTaskReq) ProtoMessage()    {}
func (*DelTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{17}
}
func (m *DelTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelTaskReq.Merge(m, src)
}
func (m *DelTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *DelTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelTaskReq proto.InternalMessageInfo

func (m *DelTaskReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PutTaskReq struct {
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *PutTaskReq) Reset()         { *m = PutTaskReq{} }
func (m *PutTaskReq) String() string { return proto.CompactTextString(m) }
func (*PutTaskReq) ProtoMessage()    {}
func (*PutTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{18}
}
func (m *PutTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutTaskReq.Merge(m, src)
}
func (m *PutTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *PutTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutTaskReq proto.InternalMessageInfo

func (m *PutTaskReq) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type UpdateTaskReq struct {
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *UpdateTaskReq) Reset()         { *m = UpdateTaskReq{} }
func (m *UpdateTaskReq) String() string { return proto.CompactTextString(m) }
func (*UpdateTaskReq) ProtoMessage()    {}
func (*UpdateTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{19}
}
func (m *UpdateTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTaskReq.Merge(m, src)
}
func (m *UpdateTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTaskReq proto.InternalMessageInfo

func (m *UpdateTaskReq) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type ListTaskReq struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Brief  bool  `protobuf:"varint,3,opt,name=brief,proto3" json:"brief,omitempty"`
}

func (m *ListTaskReq) Reset()         { *m = ListTaskReq{} }
func (m *ListTaskReq) String() string { return proto.CompactTextString(m) }
func (*ListTaskReq) ProtoMessage()    {}
func (*ListTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{20}
}
func (m *ListTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskReq.Merge(m, src)
}
func (m *ListTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskReq proto.InternalMessageInfo

func (m *ListTaskReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListTaskReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTaskReq) GetBrief() bool {
	if m != nil {
		return m.Brief
	}
	return false
}

type ListTaskRes struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (m *ListTaskRes) Reset()         { *m = ListTaskRes{} }
func (m *ListTaskRes) String() string { return proto.CompactTextString(m) }
func (*ListTaskRes) ProtoMessage()    {}
func (*ListTaskRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{21}
}
func (m *ListTaskRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskRes.Merge(m, src)
}
func (m *ListTaskRes) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskRes proto.InternalMessageInfo

func (m *ListTaskRes) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Job struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	TaskID string `protobuf:"bytes,2,opt,name=taskID,proto3" json:"taskID,omitempty" bson:"taskID,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" bson:"status,omitempty"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{22}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *Job) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Job_Sub struct {
	TemplateID string `protobuf:"bytes,1,opt,name=templateID,proto3" json:"templateID,omitempty" bson:"templateID,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" bson:"status,omitempty"`
	ExitCode   string `protobuf:"bytes,3,opt,name=exitCode,proto3" json:"exitCode,omitempty" bson:"exitCode,omitempty"`
	Stdout     string `protobuf:"bytes,4,opt,name=stdout,proto3" json:"stdout,omitempty" bson:"stdout,omitempty"`
	Stderr     string `protobuf:"bytes,5,opt,name=stderr,proto3" json:"stderr,omitempty" bson:"stderr,omitempty"`
}

func (m *Job_Sub) Reset()         { *m = Job_Sub{} }
func (m *Job_Sub) String() string { return proto.CompactTextString(m) }
func (*Job_Sub) ProtoMessage()    {}
func (*Job_Sub) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{22, 0}
}
func (m *Job_Sub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job_Sub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job_Sub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job_Sub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job_Sub.Merge(m, src)
}
func (m *Job_Sub) XXX_Size() int {
	return m.Size()
}
func (m *Job_Sub) XXX_DiscardUnknown() {
	xxx_messageInfo_Job_Sub.DiscardUnknown(m)
}

var xxx_messageInfo_Job_Sub proto.InternalMessageInfo

func (m *Job_Sub) GetTemplateID() string {
	if m != nil {
		return m.TemplateID
	}
	return ""
}

func (m *Job_Sub) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Job_Sub) GetExitCode() string {
	if m != nil {
		return m.ExitCode
	}
	return ""
}

func (m *Job_Sub) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *Job_Sub) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

type RunTaskReq struct {
	TaskID string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (m *RunTaskReq) Reset()         { *m = RunTaskReq{} }
func (m *RunTaskReq) String() string { return proto.CompactTextString(m) }
func (*RunTaskReq) ProtoMessage()    {}
func (*RunTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{23}
}
func (m *RunTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTaskReq.Merge(m, src)
}
func (m *RunTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *RunTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_RunTaskReq proto.InternalMessageInfo

func (m *RunTaskReq) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

type RunTaskRes struct {
	JobID string `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (m *RunTaskRes) Reset()         { *m = RunTaskRes{} }
func (m *RunTaskRes) String() string { return proto.CompactTextString(m) }
func (*RunTaskRes) ProtoMessage()    {}
func (*RunTaskRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{24}
}
func (m *RunTaskRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunTaskRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunTaskRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunTaskRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTaskRes.Merge(m, src)
}
func (m *RunTaskRes) XXX_Size() int {
	return m.Size()
}
func (m *RunTaskRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTaskRes.DiscardUnknown(m)
}

var xxx_messageInfo_RunTaskRes proto.InternalMessageInfo

func (m *RunTaskRes) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

type GetJobReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetJobReq) Reset()         { *m = GetJobReq{} }
func (m *GetJobReq) String() string { return proto.CompactTextString(m) }
func (*GetJobReq) ProtoMessage()    {}
func (*GetJobReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{25}
}
func (m *GetJobReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobReq.Merge(m, src)
}
func (m *GetJobReq) XXX_Size() int {
	return m.Size()
}
func (m *GetJobReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobReq proto.InternalMessageInfo

func (m *GetJobReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DelJobReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DelJobReq) Reset()         { *m = DelJobReq{} }
func (m *DelJobReq) String() string { return proto.CompactTextString(m) }
func (*DelJobReq) ProtoMessage()    {}
func (*DelJobReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{26}
}
func (m *DelJobReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelJobReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelJobReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelJobReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelJobReq.Merge(m, src)
}
func (m *DelJobReq) XXX_Size() int {
	return m.Size()
}
func (m *DelJobReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelJobReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelJobReq proto.InternalMessageInfo

func (m *DelJobReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListJobReq struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Brief  bool  `protobuf:"varint,3,opt,name=brief,proto3" json:"brief,omitempty"`
}

func (m *ListJobReq) Reset()         { *m = ListJobReq{} }
func (m *ListJobReq) String() string { return proto.CompactTextString(m) }
func (*ListJobReq) ProtoMessage()    {}
func (*ListJobReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{27}
}
func (m *ListJobReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListJobReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListJobReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListJobReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobReq.Merge(m, src)
}
func (m *ListJobReq) XXX_Size() int {
	return m.Size()
}
func (m *ListJobReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobReq proto.InternalMessageInfo

func (m *ListJobReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListJobReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListJobReq) GetBrief() bool {
	if m != nil {
		return m.Brief
	}
	return false
}

type ListJobRes struct {
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (m *ListJobRes) Reset()         { *m = ListJobRes{} }
func (m *ListJobRes) String() string { return proto.CompactTextString(m) }
func (*ListJobRes) ProtoMessage()    {}
func (*ListJobRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a38a6ec253b08d3, []int{28}
}
func (m *ListJobRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListJobRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListJobRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListJobRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobRes.Merge(m, src)
}
func (m *ListJobRes) XXX_Size() int {
	return m.Size()
}
func (m *ListJobRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobRes proto.InternalMessageInfo

func (m *ListJobRes) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*Template)(nil), "api.Template")
	proto.RegisterType((*Template_ScriptTemplate)(nil), "api.Template.ScriptTemplate")
	proto.RegisterType((*GetTemplateReq)(nil), "api.GetTemplateReq")
	proto.RegisterType((*DelTemplateReq)(nil), "api.DelTemplateReq")
	proto.RegisterType((*PutTemplateReq)(nil), "api.PutTemplateReq")
	proto.RegisterType((*UpdateTemplateReq)(nil), "api.UpdateTemplateReq")
	proto.RegisterType((*ListTemplateReq)(nil), "api.ListTemplateReq")
	proto.RegisterType((*ListTemplateRes)(nil), "api.ListTemplateRes")
	proto.RegisterType((*Variable)(nil), "api.Variable")
	proto.RegisterType((*GetVariableReq)(nil), "api.GetVariableReq")
	proto.RegisterType((*DelVariableReq)(nil), "api.DelVariableReq")
	proto.RegisterType((*PutVariableReq)(nil), "api.PutVariableReq")
	proto.RegisterType((*UpdateVariableReq)(nil), "api.UpdateVariableReq")
	proto.RegisterType((*ListVariableReq)(nil), "api.ListVariableReq")
	proto.RegisterType((*ListVariableRes)(nil), "api.ListVariableRes")
	proto.RegisterType((*Task)(nil), "api.Task")
	proto.RegisterType((*GetTaskReq)(nil), "api.GetTaskReq")
	proto.RegisterType((*DelTaskReq)(nil), "api.DelTaskReq")
	proto.RegisterType((*PutTaskReq)(nil), "api.PutTaskReq")
	proto.RegisterType((*UpdateTaskReq)(nil), "api.UpdateTaskReq")
	proto.RegisterType((*ListTaskReq)(nil), "api.ListTaskReq")
	proto.RegisterType((*ListTaskRes)(nil), "api.ListTaskRes")
	proto.RegisterType((*Job)(nil), "api.Job")
	proto.RegisterType((*Job_Sub)(nil), "api.Job.Sub")
	proto.RegisterType((*RunTaskReq)(nil), "api.RunTaskReq")
	proto.RegisterType((*RunTaskRes)(nil), "api.RunTaskRes")
	proto.RegisterType((*GetJobReq)(nil), "api.GetJobReq")
	proto.RegisterType((*DelJobReq)(nil), "api.DelJobReq")
	proto.RegisterType((*ListJobReq)(nil), "api.ListJobReq")
	proto.RegisterType((*ListJobRes)(nil), "api.ListJobRes")
}

func init() { proto.RegisterFile("api/cicd.proto", fileDescriptor_7a38a6ec253b08d3) }

var fileDescriptor_7a38a6ec253b08d3 = []byte{
	// 1311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xbf, 0x6e, 0x1b, 0xc7,
	0x13, 0x16, 0x49, 0x89, 0x7f, 0x86, 0x36, 0x25, 0xaf, 0x65, 0xfd, 0xa8, 0x13, 0x4d, 0x12, 0xfb,
	0x0b, 0x02, 0x99, 0xb6, 0x48, 0xc4, 0x6a, 0x12, 0x26, 0x51, 0x02, 0x89, 0x81, 0x21, 0xc3, 0x30,
	0x64, 0xca, 0x4e, 0x91, 0x26, 0xb8, 0x23, 0x57, 0xf4, 0x49, 0x24, 0xf7, 0x72, 0x77, 0x14, 0x22,
	0x04, 0x6e, 0xf2, 0x04, 0x01, 0xdc, 0xa4, 0x4c, 0x9f, 0x57, 0x48, 0x95, 0x2a, 0xa5, 0x01, 0x37,
	0xa9, 0x88, 0x40, 0xca, 0x13, 0xf0, 0x09, 0x82, 0xfd, 0x73, 0x7b, 0xbb, 0x17, 0xd1, 0x70, 0x0c,
	0x15, 0x6e, 0x84, 0xdb, 0x99, 0xf9, 0xbe, 0xd9, 0xdd, 0xf9, 0x76, 0x38, 0x10, 0x94, 0x6c, 0xcf,
	0x6d, 0xf5, 0xdc, 0x5e, 0xbf, 0xe9, 0xf9, 0x34, 0xa4, 0x28, 0x63, 0x7b, 0xae, 0x55, 0x19, 0x50,
	0x3a, 0x18, 0x92, 0x16, 0xf3, 0xd9, 0xe3, 0x31, 0x0d, 0xed, 0xd0, 0xa5, 0xe3, 0x40, 0x84, 0x58,
	0xab, 0x03, 0x3a, 0xa0, 0xfc, 0xb3, 0xc5, 0xbe, 0x84, 0x15, 0xe7, 0x60, 0xe9, 0xab, 0x91, 0x17,
	0x9e, 0xe1, 0xdf, 0x33, 0x90, 0x7f, 0x4a, 0x46, 0xde, 0xd0, 0x0e, 0x09, 0xda, 0x84, 0xb4, 0xdb,
	0x2f, 0xa7, 0xea, 0xa9, 0xcd, 0xc2, 0x6e, 0x79, 0x36, 0xad, 0xad, 0x3a, 0x01, 0x1d, 0xb7, 0xf1,
	0xb7, 0x6e, 0xff, 0x1e, 0x1d, 0xb9, 0x21, 0xe1, 0x88, 0x6e, 0xda, 0xed, 0xa3, 0x2d, 0x58, 0x1c,
	0xdb, 0x23, 0x52, 0x4e, 0xf3, 0xd8, 0xf5, 0xd9, 0xb4, 0x76, 0x4b, 0xc4, 0x32, 0xab, 0x1e, 0xcc,
	0xc3, 0xd0, 0x2e, 0x14, 0xfb, 0x24, 0xe8, 0xf9, 0xae, 0xc7, 0xb6, 0x56, 0xce, 0x70, 0x54, 0x7d,
	0x36, 0xad, 0x55, 0x04, 0x4a, 0x73, 0xea, 0x60, 0x1d, 0xc4, 0x52, 0x86, 0x67, 0x1e, 0x29, 0x2f,
	0x26, 0x53, 0x32, 0xab, 0x91, 0x92, 0x19, 0xd0, 0x27, 0x90, 0xef, 0xd9, 0x21, 0x19, 0x50, 0xff,
	0xac, 0xbc, 0xc4, 0x21, 0xb7, 0x67, 0xd3, 0xda, 0xba, 0x80, 0x44, 0x1e, 0x1d, 0xa6, 0xc2, 0x91,
	0x0b, 0x25, 0x91, 0x36, 0xba, 0x98, 0x72, 0xb6, 0x9e, 0xda, 0x2c, 0xde, 0xaf, 0x34, 0x6d, 0xcf,
	0x6d, 0x46, 0xc6, 0xe6, 0xa1, 0x11, 0xb3, 0xfb, 0xff, 0xd9, 0xb4, 0x56, 0x13, 0xf4, 0x26, 0x5a,
	0x4f, 0x92, 0x20, 0xb6, 0x3a, 0x50, 0x32, 0x69, 0x90, 0x05, 0xf9, 0xa1, 0x3d, 0x1e, 0x4c, 0xec,
	0x01, 0x11, 0x95, 0xe8, 0xaa, 0x35, 0x5a, 0x83, 0xac, 0xc0, 0x8b, 0x7b, 0xef, 0xca, 0x15, 0xae,
	0x43, 0xe9, 0x01, 0x51, 0x14, 0x5d, 0xf2, 0x1d, 0x2a, 0xc5, 0x95, 0x64, 0xf5, 0x62, 0x11, 0x1d,
	0x32, 0x7c, 0x53, 0xc4, 0xa7, 0x50, 0x3a, 0x98, 0x18, 0x1c, 0x77, 0x20, 0x1f, 0x46, 0x17, 0x90,
	0xe2, 0x17, 0x70, 0xdd, 0xb8, 0x80, 0xae, 0x72, 0xe3, 0x1d, 0xb8, 0xf1, 0xcc, 0xeb, 0xdb, 0x21,
	0x79, 0x47, 0xfc, 0x33, 0x58, 0x7e, 0xe4, 0x06, 0x46, 0xf6, 0x35, 0xc8, 0xd2, 0xa3, 0xa3, 0x80,
	0x84, 0x1c, 0x9b, 0xe9, 0xca, 0x15, 0x5a, 0x85, 0xa5, 0xa1, 0x3b, 0x72, 0xc5, 0x15, 0x64, 0xba,
	0x62, 0xc1, 0xac, 0x8e, 0xef, 0x92, 0x23, 0x2e, 0xad, 0x7c, 0x57, 0x2c, 0xf0, 0x4e, 0x92, 0x36,
	0x40, 0x77, 0xa1, 0x10, 0x65, 0x0d, 0xca, 0xa9, 0x7a, 0xe6, 0xdf, 0xbb, 0x8a, 0xfd, 0xf8, 0x75,
	0x0a, 0xf2, 0x5f, 0xdb, 0xbe, 0x6b, 0x3b, 0xc3, 0xf7, 0xfc, 0x71, 0x34, 0x20, 0x73, 0x72, 0x1a,
	0xc8, 0xb7, 0xa1, 0xed, 0xee, 0xe4, 0x34, 0xd0, 0x31, 0x2c, 0x48, 0xaa, 0x25, 0x3a, 0xd7, 0x7c,
	0xb5, 0xbc, 0x29, 0x42, 0xa8, 0x45, 0x8f, 0xb8, 0x03, 0xf9, 0x53, 0xb9, 0x34, 0xaa, 0xad, 0x62,
	0x94, 0x3b, 0x56, 0xcb, 0x3b, 0xe2, 0xa5, 0x5a, 0x74, 0xf4, 0x15, 0xaa, 0x25, 0xa6, 0xe5, 0x6a,
	0x89, 0xb2, 0x9a, 0x6a, 0x51, 0x41, 0xb1, 0x1f, 0xff, 0x9a, 0x86, 0xc5, 0xa7, 0x76, 0x70, 0xf2,
	0x7e, 0x2b, 0x65, 0x17, 0x8a, 0x91, 0xc0, 0xf7, 0x3b, 0x4c, 0x31, 0x19, 0x93, 0x43, 0x73, 0x1a,
	0x1c, 0x9a, 0x9d, 0x71, 0x44, 0xc7, 0x66, 0x1c, 0x4b, 0x49, 0x0e, 0xcd, 0x69, 0x70, 0x68, 0x76,
	0x5c, 0x01, 0x60, 0x3d, 0xcb, 0x0e, 0x4e, 0x2e, 0xd3, 0x57, 0x05, 0x80, 0xf5, 0xab, 0x39, 0xde,
	0xbb, 0x00, 0xac, 0x57, 0x49, 0xef, 0x6d, 0x58, 0x0c, 0xed, 0xe0, 0x44, 0xaa, 0xa6, 0x20, 0x5e,
	0x33, 0xf3, 0x71, 0x33, 0x6e, 0xc2, 0x75, 0xd9, 0x9b, 0xde, 0x2e, 0xfe, 0x09, 0x14, 0x79, 0xd3,
	0x90, 0xd1, 0x57, 0xa1, 0xac, 0xa6, 0x4e, 0x19, 0xa0, 0x1a, 0x2c, 0xb1, 0x4c, 0x91, 0xa2, 0xb4,
	0x1d, 0x08, 0x3b, 0xfe, 0x2d, 0x03, 0x99, 0x87, 0xd4, 0xf9, 0x0f, 0x42, 0xda, 0x86, 0x2c, 0x83,
	0xee, 0x77, 0xa4, 0x94, 0x36, 0x66, 0xd3, 0xda, 0xff, 0x64, 0x41, 0xb9, 0x5d, 0x07, 0xc8, 0x50,
	0x06, 0x0a, 0x42, 0x3b, 0x9c, 0x04, 0x52, 0x49, 0x1a, 0x48, 0xd8, 0x0d, 0x90, 0x30, 0x59, 0xbf,
	0xa4, 0x21, 0x73, 0x38, 0x71, 0xd0, 0x17, 0x00, 0xb1, 0x24, 0xe4, 0x1e, 0x6b, 0xb3, 0x69, 0x6d,
	0x23, 0x29, 0x23, 0x9d, 0x44, 0x83, 0x68, 0xd9, 0xd3, 0x6f, 0x9d, 0x9d, 0xfd, 0xaa, 0x93, 0xef,
	0xdd, 0x70, 0x8f, 0xf6, 0x89, 0xdc, 0xb4, 0xf6, 0xab, 0x1e, 0x79, 0x8c, 0x5f, 0xf5, 0xc8, 0x28,
	0xf2, 0xf5, 0xe9, 0x24, 0x94, 0x5d, 0xd2, 0xc8, 0xc7, 0xec, 0x89, 0x7c, 0xcc, 0x24, 0x41, 0xc4,
	0xf7, 0xe5, 0x0c, 0x61, 0x82, 0x88, 0xef, 0x27, 0x41, 0xc4, 0xf7, 0xf1, 0x07, 0x00, 0xdd, 0xc9,
	0x58, 0x13, 0x90, 0x2c, 0x8d, 0x10, 0xb0, 0x5c, 0x61, 0xac, 0x45, 0x05, 0x4c, 0x38, 0xc7, 0xd4,
	0x51, 0x41, 0x62, 0x81, 0x37, 0xa0, 0xf0, 0x80, 0x84, 0x0f, 0xa9, 0x73, 0xd9, 0x2b, 0xd8, 0x80,
	0x42, 0x87, 0x0c, 0xe7, 0x38, 0x0f, 0x00, 0x98, 0xe4, 0xa4, 0xf7, 0x2a, 0x44, 0xdc, 0xd0, 0x18,
	0x03, 0x54, 0x81, 0xc5, 0x63, 0xea, 0x44, 0x12, 0xce, 0x73, 0x09, 0x33, 0x17, 0xb7, 0xde, 0x7f,
	0x59, 0x84, 0xe2, 0xde, 0xfe, 0x5e, 0xe7, 0x90, 0xf8, 0xa7, 0x6e, 0x8f, 0xa0, 0x8f, 0x21, 0x2b,
	0xce, 0x81, 0x4a, 0x3c, 0x52, 0x1d, 0xca, 0x52, 0x48, 0xbc, 0xfa, 0xe3, 0xeb, 0xbf, 0x5f, 0xa6,
	0x4b, 0xe8, 0x5a, 0xeb, 0xf4, 0xa3, 0xd6, 0x31, 0x75, 0x5a, 0x3f, 0xb8, 0xfd, 0x17, 0xa8, 0x0d,
	0x59, 0x71, 0x48, 0x89, 0x54, 0x27, 0xb6, 0x80, 0xaf, 0xc5, 0x14, 0x2b, 0xb1, 0x0d, 0x13, 0xfb,
	0x19, 0xe4, 0xe4, 0x8e, 0xd1, 0x32, 0x0f, 0x8e, 0x6f, 0xc4, 0x4a, 0x18, 0x02, 0xbc, 0xcc, 0x29,
	0x0a, 0x28, 0x27, 0x29, 0xd0, 0x1e, 0xe4, 0x64, 0x7d, 0x24, 0x3a, 0xae, 0xa9, 0x95, 0x30, 0x04,
	0x78, 0x8d, 0xa3, 0x57, 0x70, 0x91, 0xa1, 0x7d, 0x61, 0x6f, 0xa7, 0x1a, 0x6c, 0x0b, 0xb2, 0xcb,
	0x49, 0x92, 0xb8, 0xe7, 0x59, 0xf1, 0xbb, 0xc7, 0xb7, 0x38, 0x7c, 0x19, 0x5d, 0x67, 0x70, 0xa6,
	0x0f, 0x71, 0x80, 0xcf, 0x21, 0x27, 0xbb, 0xa0, 0x44, 0xc7, 0x3d, 0xd1, 0x38, 0xbe, 0x84, 0x37,
	0x12, 0xf0, 0x1d, 0xc8, 0xc9, 0x36, 0x29, 0xe1, 0x71, 0xd3, 0x34, 0xe0, 0xd1, 0xe6, 0xf3, 0x11,
	0xbc, 0xcd, 0x3b, 0x21, 0x7a, 0x0c, 0x10, 0x77, 0x4e, 0x84, 0x38, 0xc2, 0x68, 0xa5, 0x06, 0x4b,
	0x9d, 0xb3, 0x58, 0x16, 0x8a, 0x37, 0xc1, 0xfe, 0x36, 0xdd, 0xfe, 0x0b, 0xc9, 0xf7, 0x25, 0xe4,
	0xa3, 0x36, 0x88, 0x56, 0xd4, 0xfd, 0x47, 0x5c, 0x49, 0x4b, 0x80, 0x57, 0x38, 0x23, 0x20, 0xb5,
	0x2f, 0xf4, 0x08, 0x8a, 0xda, 0xa0, 0x8b, 0x6e, 0xaa, 0x2b, 0x8d, 0x07, 0x47, 0xcb, 0x1c, 0xe7,
	0xf0, 0x3a, 0x27, 0xb9, 0x89, 0x6e, 0x70, 0x12, 0x69, 0x15, 0xf7, 0xb3, 0x0f, 0x45, 0x6d, 0x28,
	0x96, 0x6c, 0xe6, 0x98, 0x6c, 0x9c, 0x50, 0x52, 0x35, 0x2e, 0xa1, 0x7a, 0x0c, 0x45, 0x6d, 0x7a,
	0x96, 0x54, 0xe6, 0x3c, 0x6d, 0x50, 0x55, 0x39, 0x55, 0x19, 0x5f, 0xd3, 0xa9, 0xda, 0x6a, 0x20,
	0x46, 0x0e, 0x94, 0xcc, 0x81, 0x1a, 0xad, 0xe9, 0xd7, 0x3f, 0x87, 0xf5, 0x1e, 0x67, 0xfd, 0xd0,
	0xb2, 0xcc, 0x0d, 0x46, 0x5f, 0xbc, 0x14, 0x71, 0x8e, 0x03, 0xb8, 0xa6, 0x4f, 0xc7, 0x68, 0x35,
	0x2e, 0x80, 0xc6, 0x7f, 0x99, 0x35, 0x30, 0x1f, 0xab, 0x62, 0x14, 0xe5, 0x51, 0x13, 0xb3, 0x2a,
	0x8f, 0x36, 0xa9, 0x59, 0xe6, 0xfc, 0x64, 0x96, 0x27, 0x9a, 0x0f, 0xf4, 0xf2, 0x24, 0xd8, 0xcc,
	0xb9, 0x74, 0x7e, 0x79, 0x4c, 0x2a, 0x51, 0x9e, 0x04, 0x95, 0x39, 0xc0, 0xce, 0x2f, 0x4f, 0x44,
	0xd5, 0x56, 0x13, 0x68, 0x5c, 0x1e, 0x45, 0xa9, 0x97, 0x67, 0x1e, 0xab, 0x51, 0x9e, 0x78, 0x83,
	0xd1, 0x97, 0x28, 0x8f, 0xca, 0x21, 0xcb, 0xa3, 0x32, 0xc4, 0x85, 0xd0, 0xf9, 0x2f, 0xb3, 0x26,
	0xca, 0x13, 0x31, 0xee, 0x3e, 0xf9, 0xe3, 0xbc, 0x9a, 0x7a, 0x75, 0x5e, 0x4d, 0xfd, 0x75, 0x5e,
	0x4d, 0xfd, 0x74, 0x51, 0x5d, 0xf8, 0xf9, 0xa2, 0xba, 0xf0, 0xea, 0xa2, 0xba, 0xf0, 0xe7, 0x45,
	0x75, 0xe1, 0x9b, 0xed, 0x81, 0x1b, 0x3e, 0x9f, 0x38, 0xcd, 0x1e, 0x1d, 0xb5, 0x9e, 0xdb, 0xe1,
	0x90, 0x8e, 0xc9, 0xf0, 0xac, 0x35, 0xa0, 0x5b, 0xbe, 0xd7, 0x6b, 0xf9, 0x5e, 0x6f, 0xab, 0xe7,
	0xf6, 0xfa, 0xfc, 0x9f, 0x0c, 0x03, 0x32, 0x6e, 0x0d, 0x28, 0xfb, 0x74, 0xb2, 0xfc, 0xdf, 0x09,
	0xdb, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x85, 0x29, 0xe4, 0xce, 0x99, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CICDServiceClient is the client API for CICDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CICDServiceClient interface {
	GetJob(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*Job, error)
	DelJob(ctx context.Context, in *DelJobReq, opts ...grpc.CallOption) (*Empty, error)
	ListJob(ctx context.Context, in *ListJobReq, opts ...grpc.CallOption) (*ListJobRes, error)
	RunTask(ctx context.Context, in *RunTaskReq, opts ...grpc.CallOption) (*RunTaskRes, error)
	GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*Task, error)
	DelTask(ctx context.Context, in *DelTaskReq, opts ...grpc.CallOption) (*Empty, error)
	PutTask(ctx context.Context, in *PutTaskReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*Empty, error)
	ListTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskRes, error)
	GetTemplate(ctx context.Context, in *GetTemplateReq, opts ...grpc.CallOption) (*Template, error)
	DelTemplate(ctx context.Context, in *DelTemplateReq, opts ...grpc.CallOption) (*Empty, error)
	PutTemplate(ctx context.Context, in *PutTemplateReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*Empty, error)
	ListTemplate(ctx context.Context, in *ListTemplateReq, opts ...grpc.CallOption) (*ListTemplateRes, error)
	GetVariable(ctx context.Context, in *GetVariableReq, opts ...grpc.CallOption) (*Variable, error)
	DelVariable(ctx context.Context, in *DelVariableReq, opts ...grpc.CallOption) (*Empty, error)
	PutVariable(ctx context.Context, in *PutVariableReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateVariable(ctx context.Context, in *UpdateVariableReq, opts ...grpc.CallOption) (*Empty, error)
	ListVariable(ctx context.Context, in *ListVariableReq, opts ...grpc.CallOption) (*ListVariableRes, error)
}

type cICDServiceClient struct {
	cc *grpc.ClientConn
}

func NewCICDServiceClient(cc *grpc.ClientConn) CICDServiceClient {
	return &cICDServiceClient{cc}
}

func (c *cICDServiceClient) GetJob(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.CICDService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) DelJob(ctx context.Context, in *DelJobReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/DelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) ListJob(ctx context.Context, in *ListJobReq, opts ...grpc.CallOption) (*ListJobRes, error) {
	out := new(ListJobRes)
	err := c.cc.Invoke(ctx, "/api.CICDService/ListJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) RunTask(ctx context.Context, in *RunTaskReq, opts ...grpc.CallOption) (*RunTaskRes, error) {
	out := new(RunTaskRes)
	err := c.cc.Invoke(ctx, "/api.CICDService/RunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.CICDService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) DelTask(ctx context.Context, in *DelTaskReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/DelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) PutTask(ctx context.Context, in *PutTaskReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/PutTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) ListTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskRes, error) {
	out := new(ListTaskRes)
	err := c.cc.Invoke(ctx, "/api.CICDService/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) GetTemplate(ctx context.Context, in *GetTemplateReq, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/api.CICDService/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) DelTemplate(ctx context.Context, in *DelTemplateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/DelTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) PutTemplate(ctx context.Context, in *PutTemplateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/PutTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) ListTemplate(ctx context.Context, in *ListTemplateReq, opts ...grpc.CallOption) (*ListTemplateRes, error) {
	out := new(ListTemplateRes)
	err := c.cc.Invoke(ctx, "/api.CICDService/ListTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) GetVariable(ctx context.Context, in *GetVariableReq, opts ...grpc.CallOption) (*Variable, error) {
	out := new(Variable)
	err := c.cc.Invoke(ctx, "/api.CICDService/GetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) DelVariable(ctx context.Context, in *DelVariableReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/DelVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) PutVariable(ctx context.Context, in *PutVariableReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/PutVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) UpdateVariable(ctx context.Context, in *UpdateVariableReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.CICDService/UpdateVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cICDServiceClient) ListVariable(ctx context.Context, in *ListVariableReq, opts ...grpc.CallOption) (*ListVariableRes, error) {
	out := new(ListVariableRes)
	err := c.cc.Invoke(ctx, "/api.CICDService/ListVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CICDServiceServer is the server API for CICDService service.
type CICDServiceServer interface {
	GetJob(context.Context, *GetJobReq) (*Job, error)
	DelJob(context.Context, *DelJobReq) (*Empty, error)
	ListJob(context.Context, *ListJobReq) (*ListJobRes, error)
	RunTask(context.Context, *RunTaskReq) (*RunTaskRes, error)
	GetTask(context.Context, *GetTaskReq) (*Task, error)
	DelTask(context.Context, *DelTaskReq) (*Empty, error)
	PutTask(context.Context, *PutTaskReq) (*Empty, error)
	UpdateTask(context.Context, *UpdateTaskReq) (*Empty, error)
	ListTask(context.Context, *ListTaskReq) (*ListTaskRes, error)
	GetTemplate(context.Context, *GetTemplateReq) (*Template, error)
	DelTemplate(context.Context, *DelTemplateReq) (*Empty, error)
	PutTemplate(context.Context, *PutTemplateReq) (*Empty, error)
	UpdateTemplate(context.Context, *UpdateTemplateReq) (*Empty, error)
	ListTemplate(context.Context, *ListTemplateReq) (*ListTemplateRes, error)
	GetVariable(context.Context, *GetVariableReq) (*Variable, error)
	DelVariable(context.Context, *DelVariableReq) (*Empty, error)
	PutVariable(context.Context, *PutVariableReq) (*Empty, error)
	UpdateVariable(context.Context, *UpdateVariableReq) (*Empty, error)
	ListVariable(context.Context, *ListVariableReq) (*ListVariableRes, error)
}

// UnimplementedCICDServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCICDServiceServer struct {
}

func (*UnimplementedCICDServiceServer) GetJob(ctx context.Context, req *GetJobReq) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedCICDServiceServer) DelJob(ctx context.Context, req *DelJobReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelJob not implemented")
}
func (*UnimplementedCICDServiceServer) ListJob(ctx context.Context, req *ListJobReq) (*ListJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (*UnimplementedCICDServiceServer) RunTask(ctx context.Context, req *RunTaskReq) (*RunTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (*UnimplementedCICDServiceServer) GetTask(ctx context.Context, req *GetTaskReq) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedCICDServiceServer) DelTask(ctx context.Context, req *DelTaskReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTask not implemented")
}
func (*UnimplementedCICDServiceServer) PutTask(ctx context.Context, req *PutTaskReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTask not implemented")
}
func (*UnimplementedCICDServiceServer) UpdateTask(ctx context.Context, req *UpdateTaskReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (*UnimplementedCICDServiceServer) ListTask(ctx context.Context, req *ListTaskReq) (*ListTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (*UnimplementedCICDServiceServer) GetTemplate(ctx context.Context, req *GetTemplateReq) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedCICDServiceServer) DelTemplate(ctx context.Context, req *DelTemplateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTemplate not implemented")
}
func (*UnimplementedCICDServiceServer) PutTemplate(ctx context.Context, req *PutTemplateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTemplate not implemented")
}
func (*UnimplementedCICDServiceServer) UpdateTemplate(ctx context.Context, req *UpdateTemplateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (*UnimplementedCICDServiceServer) ListTemplate(ctx context.Context, req *ListTemplateReq) (*ListTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplate not implemented")
}
func (*UnimplementedCICDServiceServer) GetVariable(ctx context.Context, req *GetVariableReq) (*Variable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (*UnimplementedCICDServiceServer) DelVariable(ctx context.Context, req *DelVariableReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVariable not implemented")
}
func (*UnimplementedCICDServiceServer) PutVariable(ctx context.Context, req *PutVariableReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutVariable not implemented")
}
func (*UnimplementedCICDServiceServer) UpdateVariable(ctx context.Context, req *UpdateVariableReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariable not implemented")
}
func (*UnimplementedCICDServiceServer) ListVariable(ctx context.Context, req *ListVariableReq) (*ListVariableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariable not implemented")
}

func RegisterCICDServiceServer(s *grpc.Server, srv CICDServiceServer) {
	s.RegisterService(&_CICDService_serviceDesc, srv)
}

func _CICDService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).GetJob(ctx, req.(*GetJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_DelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).DelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/DelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).DelJob(ctx, req.(*DelJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/ListJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).ListJob(ctx, req.(*ListJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/RunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).RunTask(ctx, req.(*RunTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).GetTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_DelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).DelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/DelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).DelTask(ctx, req.(*DelTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_PutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).PutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/PutTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).PutTask(ctx, req.(*PutTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).UpdateTask(ctx, req.(*UpdateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).ListTask(ctx, req.(*ListTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).GetTemplate(ctx, req.(*GetTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_DelTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).DelTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/DelTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).DelTemplate(ctx, req.(*DelTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_PutTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).PutTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/PutTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).PutTemplate(ctx, req.(*PutTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).UpdateTemplate(ctx, req.(*UpdateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_ListTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).ListTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/ListTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).ListTemplate(ctx, req.(*ListTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/GetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).GetVariable(ctx, req.(*GetVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_DelVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).DelVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/DelVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).DelVariable(ctx, req.(*DelVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_PutVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).PutVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/PutVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).PutVariable(ctx, req.(*PutVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/UpdateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).UpdateVariable(ctx, req.(*UpdateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CICDService_ListVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CICDServiceServer).ListVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CICDService/ListVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CICDServiceServer).ListVariable(ctx, req.(*ListVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CICDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CICDService",
	HandlerType: (*CICDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _CICDService_GetJob_Handler,
		},
		{
			MethodName: "DelJob",
			Handler:    _CICDService_DelJob_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _CICDService_ListJob_Handler,
		},
		{
			MethodName: "RunTask",
			Handler:    _CICDService_RunTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _CICDService_GetTask_Handler,
		},
		{
			MethodName: "DelTask",
			Handler:    _CICDService_DelTask_Handler,
		},
		{
			MethodName: "PutTask",
			Handler:    _CICDService_PutTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _CICDService_UpdateTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _CICDService_ListTask_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _CICDService_GetTemplate_Handler,
		},
		{
			MethodName: "DelTemplate",
			Handler:    _CICDService_DelTemplate_Handler,
		},
		{
			MethodName: "PutTemplate",
			Handler:    _CICDService_PutTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _CICDService_UpdateTemplate_Handler,
		},
		{
			MethodName: "ListTemplate",
			Handler:    _CICDService_ListTemplate_Handler,
		},
		{
			MethodName: "GetVariable",
			Handler:    _CICDService_GetVariable_Handler,
		},
		{
			MethodName: "DelVariable",
			Handler:    _CICDService_DelVariable_Handler,
		},
		{
			MethodName: "PutVariable",
			Handler:    _CICDService_PutVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _CICDService_UpdateVariable_Handler,
		},
		{
			MethodName: "ListVariable",
			Handler:    _CICDService_ListVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cicd.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Template) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Template) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Template) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScriptTemplate != nil {
		{
			size, err := m.ScriptTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCicd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Template_ScriptTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Template_ScriptTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Template_ScriptTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Script) > 0 {
		i -= len(m.Script)
		copy(dAtA[i:], m.Script)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Script)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTemplateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTemplateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTemplateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelTemplateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelTemplateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelTemplateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutTemplateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutTemplateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutTemplateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Template != nil {
		{
			size, err := m.Template.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCicd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTemplateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTemplateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTemplateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Template != nil {
		{
			size, err := m.Template.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCicd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTemplateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTemplateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTemplateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Brief {
		i--
		if m.Brief {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCicd(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintCicd(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTemplateRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTemplateRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTemplateRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Templates) > 0 {
		for iNdEx := len(m.Templates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Templates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCicd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Variable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Variable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Variable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kvs) > 0 {
		i -= len(m.Kvs)
		copy(dAtA[i:], m.Kvs)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Kvs)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVariableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVariableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVariableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelVariableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelVariableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelVariableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutVariableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutVariableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutVariableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Variable != nil {
		{
			size, err := m.Variable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCicd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVariableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVariableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVariableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Variable != nil {
		{
			size, err := m.Variable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCicd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVariableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVariableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVariableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Brief {
		i--
		if m.Brief {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCicd(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintCicd(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListVariableRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVariableRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVariableRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Variables) > 0 {
		for iNdEx := len(m.Variables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Variables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCicd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VariableIDs) > 0 {
		for iNdEx := len(m.VariableIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VariableIDs[iNdEx])
			copy(dAtA[i:], m.VariableIDs[iNdEx])
			i = encodeVarintCicd(dAtA, i, uint64(len(m.VariableIDs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TemplateIDs) > 0 {
		for iNdEx := len(m.TemplateIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TemplateIDs[iNdEx])
			copy(dAtA[i:], m.TemplateIDs[iNdEx])
			i = encodeVarintCicd(dAtA, i, uint64(len(m.TemplateIDs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCicd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCicd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Brief {
		i--
		if m.Brief {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCicd(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintCicd(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCicd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskID) > 0 {
		i -= len(m.TaskID)
		copy(dAtA[i:], m.TaskID)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.TaskID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Job_Sub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job_Sub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job_Sub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stderr) > 0 {
		i -= len(m.Stderr)
		copy(dAtA[i:], m.Stderr)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Stderr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Stdout) > 0 {
		i -= len(m.Stdout)
		copy(dAtA[i:], m.Stdout)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Stdout)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExitCode) > 0 {
		i -= len(m.ExitCode)
		copy(dAtA[i:], m.ExitCode)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.ExitCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TemplateID) > 0 {
		i -= len(m.TemplateID)
		copy(dAtA[i:], m.TemplateID)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.TemplateID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskID) > 0 {
		i -= len(m.TaskID)
		copy(dAtA[i:], m.TaskID)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.TaskID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunTaskRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunTaskRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTaskRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobID) > 0 {
		i -= len(m.JobID)
		copy(dAtA[i:], m.JobID)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.JobID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelJobReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelJobReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelJobReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCicd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListJobReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListJobReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListJobReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Brief {
		i--
		if m.Brief {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCicd(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintCicd(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListJobRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListJobRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListJobRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for iNdEx := len(m.Jobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCicd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCicd(dAtA []byte, offset int, v uint64) int {
	offset -= sovCicd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Template) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	if m.ScriptTemplate != nil {
		l = m.ScriptTemplate.Size()
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *Template_ScriptTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *GetTemplateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *DelTemplateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *PutTemplateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Template != nil {
		l = m.Template.Size()
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *UpdateTemplateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Template != nil {
		l = m.Template.Size()
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *ListTemplateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovCicd(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovCicd(uint64(m.Limit))
	}
	if m.Brief {
		n += 2
	}
	return n
}

func (m *ListTemplateRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Templates) > 0 {
		for _, e := range m.Templates {
			l = e.Size()
			n += 1 + l + sovCicd(uint64(l))
		}
	}
	return n
}

func (m *Variable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Kvs)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *GetVariableReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *DelVariableReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *PutVariableReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Variable != nil {
		l = m.Variable.Size()
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *UpdateVariableReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Variable != nil {
		l = m.Variable.Size()
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *ListVariableReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovCicd(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovCicd(uint64(m.Limit))
	}
	if m.Brief {
		n += 2
	}
	return n
}

func (m *ListVariableRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Variables) > 0 {
		for _, e := range m.Variables {
			l = e.Size()
			n += 1 + l + sovCicd(uint64(l))
		}
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	if len(m.TemplateIDs) > 0 {
		for _, s := range m.TemplateIDs {
			l = len(s)
			n += 1 + l + sovCicd(uint64(l))
		}
	}
	if len(m.VariableIDs) > 0 {
		for _, s := range m.VariableIDs {
			l = len(s)
			n += 1 + l + sovCicd(uint64(l))
		}
	}
	return n
}

func (m *GetTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *DelTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *PutTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *UpdateTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *ListTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovCicd(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovCicd(uint64(m.Limit))
	}
	if m.Brief {
		n += 2
	}
	return n
}

func (m *ListTaskRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovCicd(uint64(l))
		}
	}
	return n
}

func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.TaskID)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *Job_Sub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TemplateID)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.ExitCode)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Stdout)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	l = len(m.Stderr)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *RunTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskID)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *RunTaskRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobID)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *GetJobReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *DelJobReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCicd(uint64(l))
	}
	return n
}

func (m *ListJobReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovCicd(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovCicd(uint64(m.Limit))
	}
	if m.Brief {
		n += 2
	}
	return n
}

func (m *ListJobRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for _, e := range m.Jobs {
			l = e.Size()
			n += 1 + l + sovCicd(uint64(l))
		}
	}
	return n
}

func sovCicd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCicd(x uint64) (n int) {
	return sovCicd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Template) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Template: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Template: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptTemplate == nil {
				m.ScriptTemplate = &Template_ScriptTemplate{}
			}
			if err := m.ScriptTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Template_ScriptTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTemplateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTemplateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTemplateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelTemplateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelTemplateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelTemplateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutTemplateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutTemplateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutTemplateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Template == nil {
				m.Template = &Template{}
			}
			if err := m.Template.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTemplateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTemplateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTemplateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Template == nil {
				m.Template = &Template{}
			}
			if err := m.Template.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTemplateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTemplateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTemplateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brief", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Brief = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTemplateRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTemplateRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTemplateRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Templates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Templates = append(m.Templates, &Template{})
			if err := m.Templates[len(m.Templates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Variable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Variable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Variable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kvs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVariableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVariableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVariableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelVariableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelVariableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelVariableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutVariableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutVariableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutVariableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Variable == nil {
				m.Variable = &Variable{}
			}
			if err := m.Variable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVariableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVariableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVariableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Variable == nil {
				m.Variable = &Variable{}
			}
			if err := m.Variable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVariableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVariableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVariableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brief", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Brief = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVariableRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVariableRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVariableRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variables = append(m.Variables, &Variable{})
			if err := m.Variables[len(m.Variables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateIDs = append(m.TemplateIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VariableIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VariableIDs = append(m.VariableIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brief", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Brief = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job_Sub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stdout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stderr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunTaskRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunTaskRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunTaskRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelJobReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelJobReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelJobReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListJobReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListJobReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListJobReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brief", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Brief = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListJobRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListJobRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListJobRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCicd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCicd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobs = append(m.Jobs, &Job{})
			if err := m.Jobs[len(m.Jobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCicd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCicd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCicd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCicd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCicd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCicd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCicd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCicd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCicd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCicd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCicd = fmt.Errorf("proto: unexpected end of group")
)
