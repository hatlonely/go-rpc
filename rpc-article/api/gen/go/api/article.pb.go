// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/article.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Article struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" rule:"x >= 0"`
	OwnerID              int64    `protobuf:"varint,2,opt,name=ownerID,proto3" json:"ownerID,omitempty" rule:"x >= 0"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Tags                 string   `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	Brief                string   `protobuf:"bytes,5,opt,name=brief,proto3" json:"brief,omitempty"`
	Content              string   `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	CTime                string   `protobuf:"bytes,7,opt,name=cTime,proto3" json:"cTime,omitempty"`
	UTime                string   `protobuf:"bytes,8,opt,name=uTime,proto3" json:"uTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_73576a8c9b6cb08b, []int{0}
}
func (m *Article) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Article.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(m, src)
}
func (m *Article) XXX_Size() int {
	return m.Size()
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Article) GetOwnerID() int64 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Article) GetBrief() string {
	if m != nil {
		return m.Brief
	}
	return ""
}

func (m *Article) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Article) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Article) GetUTime() string {
	if m != nil {
		return m.UTime
	}
	return ""
}

type GetArticleReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" rule:"x >= 0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetArticleReq) Reset()         { *m = GetArticleReq{} }
func (m *GetArticleReq) String() string { return proto.CompactTextString(m) }
func (*GetArticleReq) ProtoMessage()    {}
func (*GetArticleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_73576a8c9b6cb08b, []int{1}
}
func (m *GetArticleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArticleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArticleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArticleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArticleReq.Merge(m, src)
}
func (m *GetArticleReq) XXX_Size() int {
	return m.Size()
}
func (m *GetArticleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArticleReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetArticleReq proto.InternalMessageInfo

func (m *GetArticleReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DelArticleReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" rule:"x >= 0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelArticleReq) Reset()         { *m = DelArticleReq{} }
func (m *DelArticleReq) String() string { return proto.CompactTextString(m) }
func (*DelArticleReq) ProtoMessage()    {}
func (*DelArticleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_73576a8c9b6cb08b, []int{2}
}
func (m *DelArticleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelArticleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelArticleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelArticleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelArticleReq.Merge(m, src)
}
func (m *DelArticleReq) XXX_Size() int {
	return m.Size()
}
func (m *DelArticleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelArticleReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelArticleReq proto.InternalMessageInfo

func (m *DelArticleReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PutArticleReq struct {
	Article              *Article `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutArticleReq) Reset()         { *m = PutArticleReq{} }
func (m *PutArticleReq) String() string { return proto.CompactTextString(m) }
func (*PutArticleReq) ProtoMessage()    {}
func (*PutArticleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_73576a8c9b6cb08b, []int{3}
}
func (m *PutArticleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutArticleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutArticleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutArticleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutArticleReq.Merge(m, src)
}
func (m *PutArticleReq) XXX_Size() int {
	return m.Size()
}
func (m *PutArticleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutArticleReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutArticleReq proto.InternalMessageInfo

func (m *PutArticleReq) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

type UpdateArticleReq struct {
	Article              *Article `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateArticleReq) Reset()         { *m = UpdateArticleReq{} }
func (m *UpdateArticleReq) String() string { return proto.CompactTextString(m) }
func (*UpdateArticleReq) ProtoMessage()    {}
func (*UpdateArticleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_73576a8c9b6cb08b, []int{4}
}
func (m *UpdateArticleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateArticleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateArticleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateArticleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateArticleReq.Merge(m, src)
}
func (m *UpdateArticleReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateArticleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateArticleReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateArticleReq proto.InternalMessageInfo

func (m *UpdateArticleReq) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

type SearchArticleReq struct {
	Keyword              string   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" rule:"x >= 0 && x <= 100"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchArticleReq) Reset()         { *m = SearchArticleReq{} }
func (m *SearchArticleReq) String() string { return proto.CompactTextString(m) }
func (*SearchArticleReq) ProtoMessage()    {}
func (*SearchArticleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_73576a8c9b6cb08b, []int{5}
}
func (m *SearchArticleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchArticleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchArticleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchArticleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchArticleReq.Merge(m, src)
}
func (m *SearchArticleReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchArticleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchArticleReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchArticleReq proto.InternalMessageInfo

func (m *SearchArticleReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchArticleReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchArticleReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchArticleRes struct {
	Articles             []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SearchArticleRes) Reset()         { *m = SearchArticleRes{} }
func (m *SearchArticleRes) String() string { return proto.CompactTextString(m) }
func (*SearchArticleRes) ProtoMessage()    {}
func (*SearchArticleRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_73576a8c9b6cb08b, []int{6}
}
func (m *SearchArticleRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchArticleRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchArticleRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchArticleRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchArticleRes.Merge(m, src)
}
func (m *SearchArticleRes) XXX_Size() int {
	return m.Size()
}
func (m *SearchArticleRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchArticleRes.DiscardUnknown(m)
}

var xxx_messageInfo_SearchArticleRes proto.InternalMessageInfo

func (m *SearchArticleRes) GetArticles() []*Article {
	if m != nil {
		return m.Articles
	}
	return nil
}

func init() {
	proto.RegisterType((*Article)(nil), "api.Article")
	proto.RegisterType((*GetArticleReq)(nil), "api.GetArticleReq")
	proto.RegisterType((*DelArticleReq)(nil), "api.DelArticleReq")
	proto.RegisterType((*PutArticleReq)(nil), "api.PutArticleReq")
	proto.RegisterType((*UpdateArticleReq)(nil), "api.UpdateArticleReq")
	proto.RegisterType((*SearchArticleReq)(nil), "api.SearchArticleReq")
	proto.RegisterType((*SearchArticleRes)(nil), "api.SearchArticleRes")
}

func init() { proto.RegisterFile("api/article.proto", fileDescriptor_73576a8c9b6cb08b) }

var fileDescriptor_73576a8c9b6cb08b = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x1c, 0xb7, 0x75, 0x7b, 0xdb, 0x7c, 0x4a, 0x47, 0x25, 0x1a, 0x0c, 0xa4, 0xc6, 0x48,
	0x51, 0x54, 0x54, 0x3b, 0x4d, 0x25, 0x90, 0xa2, 0x16, 0x89, 0xa8, 0x88, 0xb0, 0x41, 0xc5, 0x85,
	0x4d, 0x77, 0x8e, 0x33, 0x71, 0x46, 0x38, 0x1e, 0x63, 0x4f, 0xda, 0x46, 0xa8, 0x1b, 0x1e, 0x80,
	0x0d, 0x1b, 0x1e, 0x89, 0x25, 0x12, 0xfb, 0x82, 0x42, 0x9f, 0xa0, 0x4f, 0x80, 0x3c, 0xb6, 0x49,
	0xdc, 0x10, 0xf1, 0xb3, 0x9b, 0x73, 0xee, 0xb9, 0x67, 0xee, 0xe8, 0xcc, 0x0c, 0xac, 0xdb, 0x01,
	0x35, 0xed, 0x90, 0x53, 0xc7, 0x23, 0x46, 0x10, 0x32, 0xce, 0x90, 0x6c, 0x07, 0x54, 0xbd, 0xed,
	0x32, 0xe6, 0x7a, 0xc4, 0x14, 0x65, 0xdf, 0x67, 0xdc, 0xe6, 0x94, 0xf9, 0x51, 0x22, 0x51, 0x6f,
	0xa5, 0x55, 0x81, 0x3a, 0xc3, 0x9e, 0x49, 0x06, 0x01, 0x1f, 0xa5, 0xc5, 0x0d, 0x97, 0xb9, 0x4c,
	0x2c, 0xcd, 0x78, 0x95, 0xb0, 0xfa, 0x57, 0x09, 0x94, 0xc7, 0xc9, 0x3e, 0xe8, 0x2e, 0x14, 0x68,
	0x17, 0x4b, 0x9a, 0x54, 0x93, 0x5b, 0xeb, 0x57, 0x17, 0x9b, 0xc5, 0x70, 0xe8, 0x91, 0xa6, 0x7e,
	0xa6, 0x3d, 0xda, 0xd7, 0xea, 0xba, 0x55, 0xa0, 0x5d, 0x74, 0x1f, 0x14, 0x76, 0xea, 0x93, 0xf0,
	0xd9, 0x01, 0x2e, 0xcc, 0xd3, 0x65, 0x0a, 0xb4, 0x01, 0x8b, 0x9c, 0x72, 0x8f, 0x60, 0x59, 0x93,
	0x6a, 0x2b, 0x56, 0x02, 0x10, 0x82, 0x05, 0x6e, 0xbb, 0x11, 0x5e, 0x10, 0xa4, 0x58, 0xc7, 0xca,
	0x4e, 0x48, 0x49, 0x0f, 0x2f, 0x26, 0x4a, 0x01, 0x10, 0x06, 0xc5, 0x61, 0x3e, 0x27, 0x3e, 0xc7,
	0x4b, 0x82, 0xcf, 0x60, 0xac, 0x77, 0x5e, 0xd2, 0x01, 0xc1, 0x4a, 0xa2, 0x17, 0x20, 0x66, 0x87,
	0x82, 0x5d, 0x4e, 0x58, 0x01, 0xf4, 0x06, 0x14, 0x9f, 0x12, 0x9e, 0x9e, 0xd1, 0x22, 0x6f, 0xfe,
	0xe0, 0x98, 0x71, 0xcf, 0x01, 0xf1, 0xfe, 0xae, 0xe7, 0x21, 0x14, 0x0f, 0x87, 0xd3, 0xfb, 0x54,
	0x41, 0x49, 0x13, 0x14, 0x8d, 0xab, 0x8d, 0x35, 0xc3, 0x0e, 0xa8, 0x91, 0x29, 0xb2, 0xa2, 0xde,
	0x84, 0xd2, 0xab, 0xa0, 0x6b, 0x73, 0xf2, 0x0f, 0xbd, 0x23, 0x28, 0x1d, 0x11, 0x3b, 0x74, 0xfa,
	0x53, 0xbd, 0x18, 0x94, 0xd7, 0x64, 0x74, 0xca, 0xc2, 0x64, 0xe0, 0x15, 0x2b, 0x83, 0xa8, 0x0c,
	0x4b, 0xac, 0xd7, 0x8b, 0x08, 0x4f, 0xc2, 0xb3, 0x52, 0x84, 0x76, 0x61, 0xd1, 0xa3, 0x03, 0xca,
	0x45, 0x50, 0x72, 0xeb, 0xce, 0xd5, 0xc5, 0xe6, 0xcd, 0xe9, 0x03, 0x6a, 0xd5, 0xaa, 0x76, 0xa6,
	0xed, 0xed, 0x6b, 0x3b, 0xf5, 0xba, 0x6e, 0x25, 0x5a, 0x7d, 0x6f, 0x66, 0xeb, 0x08, 0xd5, 0x60,
	0x39, 0x9d, 0x2c, 0xc2, 0x92, 0x26, 0xcf, 0xcc, 0xfd, 0xb3, 0xda, 0xb8, 0x94, 0xe1, 0xff, 0x94,
	0x3d, 0x22, 0xe1, 0x09, 0x75, 0x08, 0x6a, 0x03, 0x4c, 0x82, 0x42, 0x48, 0x34, 0xe6, 0x92, 0x53,
	0x73, 0x66, 0x3a, 0x7e, 0xf7, 0xe5, 0xf2, 0x43, 0x01, 0xa1, 0x92, 0x79, 0xb2, 0x93, 0xbd, 0x15,
	0xf3, 0x2d, 0xed, 0x9e, 0x23, 0x0b, 0x60, 0x12, 0x5f, 0xea, 0x94, 0xcb, 0x53, 0x2d, 0x1b, 0xc9,
	0x53, 0x31, 0xb2, 0xa7, 0x62, 0x3c, 0x89, 0x9f, 0x4a, 0xe6, 0xb9, 0x35, 0xeb, 0x79, 0x08, 0x30,
	0x89, 0x37, 0xf5, 0xcc, 0xe5, 0x3d, 0xd7, 0xb3, 0x2c, 0x3c, 0x4b, 0xfa, 0xea, 0x94, 0x67, 0x53,
	0xda, 0x42, 0xef, 0x25, 0x28, 0xe6, 0x82, 0x47, 0x37, 0x84, 0xeb, 0xf5, 0xcb, 0x30, 0xd7, 0xf8,
	0xb9, 0x30, 0x6e, 0xab, 0x38, 0x37, 0x6c, 0xf6, 0x6b, 0xd0, 0xee, 0x79, 0x33, 0xbb, 0x27, 0xc7,
	0xf7, 0x1a, 0xbf, 0x17, 0xa1, 0x17, 0x50, 0xcc, 0x25, 0x9a, 0xce, 0x73, 0xfd, 0x82, 0xa9, 0xbf,
	0xa4, 0x23, 0x1d, 0x89, 0x71, 0xd6, 0x10, 0xc4, 0x3b, 0x45, 0xa2, 0xda, 0x6a, 0x7f, 0x1a, 0x57,
	0xa4, 0xcf, 0xe3, 0x8a, 0xf4, 0x6d, 0x5c, 0x91, 0x3e, 0x7e, 0xaf, 0xfc, 0x77, 0xfc, 0xc0, 0xa5,
	0xbc, 0x3f, 0xec, 0x18, 0x0e, 0x1b, 0x98, 0x7d, 0x9b, 0x7b, 0xcc, 0x27, 0xde, 0xc8, 0x74, 0xd9,
	0x76, 0x18, 0x38, 0x66, 0x18, 0x38, 0xdb, 0xd9, 0x8c, 0xf1, 0x17, 0xe7, 0x12, 0xdf, 0x74, 0x59,
	0xbc, 0xec, 0x2c, 0x89, 0xc3, 0xef, 0xfe, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x79, 0x5a, 0x84,
	0x1a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArticleServiceClient interface {
	GetArticle(ctx context.Context, in *GetArticleReq, opts ...grpc.CallOption) (*Article, error)
	DelArticle(ctx context.Context, in *DelArticleReq, opts ...grpc.CallOption) (*empty.Empty, error)
	PutArticle(ctx context.Context, in *PutArticleReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchArticle(ctx context.Context, in *SearchArticleReq, opts ...grpc.CallOption) (*SearchArticleRes, error)
}

type articleServiceClient struct {
	cc *grpc.ClientConn
}

func NewArticleServiceClient(cc *grpc.ClientConn) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) GetArticle(ctx context.Context, in *GetArticleReq, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/api.ArticleService/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) DelArticle(ctx context.Context, in *DelArticleReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.ArticleService/DelArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) PutArticle(ctx context.Context, in *PutArticleReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.ArticleService/PutArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.ArticleService/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) SearchArticle(ctx context.Context, in *SearchArticleReq, opts ...grpc.CallOption) (*SearchArticleRes, error) {
	out := new(SearchArticleRes)
	err := c.cc.Invoke(ctx, "/api.ArticleService/SearchArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
type ArticleServiceServer interface {
	GetArticle(context.Context, *GetArticleReq) (*Article, error)
	DelArticle(context.Context, *DelArticleReq) (*empty.Empty, error)
	PutArticle(context.Context, *PutArticleReq) (*empty.Empty, error)
	UpdateArticle(context.Context, *UpdateArticleReq) (*empty.Empty, error)
	SearchArticle(context.Context, *SearchArticleReq) (*SearchArticleRes, error)
}

// UnimplementedArticleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (*UnimplementedArticleServiceServer) GetArticle(ctx context.Context, req *GetArticleReq) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (*UnimplementedArticleServiceServer) DelArticle(ctx context.Context, req *DelArticleReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticle not implemented")
}
func (*UnimplementedArticleServiceServer) PutArticle(ctx context.Context, req *PutArticleReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutArticle not implemented")
}
func (*UnimplementedArticleServiceServer) UpdateArticle(ctx context.Context, req *UpdateArticleReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (*UnimplementedArticleServiceServer) SearchArticle(ctx context.Context, req *SearchArticleReq) (*SearchArticleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArticle not implemented")
}

func RegisterArticleServiceServer(s *grpc.Server, srv ArticleServiceServer) {
	s.RegisterService(&_ArticleService_serviceDesc, srv)
}

func _ArticleService_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArticleService/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetArticle(ctx, req.(*GetArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_DelArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).DelArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArticleService/DelArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).DelArticle(ctx, req.(*DelArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_PutArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).PutArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArticleService/PutArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).PutArticle(ctx, req.(*PutArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArticleService/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).UpdateArticle(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_SearchArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).SearchArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArticleService/SearchArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).SearchArticle(ctx, req.(*SearchArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArticleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticle",
			Handler:    _ArticleService_GetArticle_Handler,
		},
		{
			MethodName: "DelArticle",
			Handler:    _ArticleService_DelArticle_Handler,
		},
		{
			MethodName: "PutArticle",
			Handler:    _ArticleService_PutArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleService_UpdateArticle_Handler,
		},
		{
			MethodName: "SearchArticle",
			Handler:    _ArticleService_SearchArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/article.proto",
}

func (m *Article) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Article) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Article) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UTime) > 0 {
		i -= len(m.UTime)
		copy(dAtA[i:], m.UTime)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.UTime)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CTime) > 0 {
		i -= len(m.CTime)
		copy(dAtA[i:], m.CTime)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.CTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Brief) > 0 {
		i -= len(m.Brief)
		copy(dAtA[i:], m.Brief)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Brief)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OwnerID != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetArticleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArticleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArticleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelArticleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelArticleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelArticleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PutArticleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutArticleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutArticleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Article != nil {
		{
			size, err := m.Article.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArticle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateArticleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateArticleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateArticleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Article != nil {
		{
			size, err := m.Article.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArticle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchArticleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchArticleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchArticleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchArticleRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchArticleRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchArticleRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Articles) > 0 {
		for iNdEx := len(m.Articles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Articles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArticle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintArticle(dAtA []byte, offset int, v uint64) int {
	offset -= sovArticle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Article) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArticle(uint64(m.Id))
	}
	if m.OwnerID != 0 {
		n += 1 + sovArticle(uint64(m.OwnerID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	l = len(m.Brief)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	l = len(m.CTime)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	l = len(m.UTime)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetArticleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArticle(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelArticleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArticle(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutArticleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Article != nil {
		l = m.Article.Size()
		n += 1 + l + sovArticle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateArticleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Article != nil {
		l = m.Article.Size()
		n += 1 + l + sovArticle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchArticleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovArticle(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovArticle(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchArticleRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Articles) > 0 {
		for _, e := range m.Articles {
			l = e.Size()
			n += 1 + l + sovArticle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovArticle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArticle(x uint64) (n int) {
	return sovArticle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Article) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Article: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Article: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brief", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brief = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArticleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArticleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArticleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelArticleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelArticleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelArticleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutArticleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutArticleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutArticleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Article == nil {
				m.Article = &Article{}
			}
			if err := m.Article.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateArticleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateArticleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateArticleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Article == nil {
				m.Article = &Article{}
			}
			if err := m.Article.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchArticleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchArticleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchArticleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchArticleRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchArticleRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchArticleRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Articles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Articles = append(m.Articles, &Article{})
			if err := m.Articles[len(m.Articles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArticle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArticle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArticle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArticle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArticle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArticle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArticle = fmt.Errorf("proto: unexpected end of group")
)
